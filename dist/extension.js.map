{"version":3,"file":"extension.js","mappings":"kCAAAA,EAAOC,QAAUC,QAAQ,S,GCCrBC,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaL,QAGrB,IAAID,EAASG,EAAyBE,GAAY,CAGjDJ,QAAS,CAAC,GAOX,OAHAO,EAAoBH,GAAUL,EAAQA,EAAOC,QAASG,GAG/CJ,EAAOC,OACf,C,uGCpBA,eAIA,oBAAyBQ,GAIxB,IAAIC,EAAaC,EAAOC,SAASC,gBAAgB,wBAAwB,KACxE,IAIDJ,EAAQK,cAAcC,KAAKL,GAExB,MAAMM,EAAqBL,EAAOM,OAAOC,+BAA+B,CACpEC,MAAO,UACbC,UAAW,WAMHC,EAAqBV,EAAOM,OAAOC,+BAA+B,CACpEC,MAAO,YAELG,EAAsBX,EAAOM,OAAOC,+BAA+B,CACrEC,MAAO,QAOX,IAAII,EAEJ,SAASC,IACL,MAAMC,EAASd,EAAOM,OAAOS,iBAC7B,GAAID,EAAQ,CACR,MAAME,EAAWF,EAAOE,SAClBC,EAAOD,EAASE,UAChBC,EAA6B,GAC7BC,EAA6B,GAC7BC,EAA8B,GACpC,IAAIC,EACJ,MAAMC,EAAQ,sCACd,KAAOD,EAAQC,EAAMC,KAAKP,IAAO,CAC7B,MAAMQ,EAAQT,EAASU,WAAWJ,EAAMK,OAClCC,EAAMZ,EAASU,WAAWJ,EAAMK,MAAQL,EAAM,GAAGO,QACjDC,EAAQ,IAAI9B,EAAO+B,MAAMN,EAAOG,GACtC,OAAQN,EAAM,GAAGU,eACb,IAAK,OACL,IAAK,OACDb,EAAWf,KAAK0B,GAChB,MACJ,IAAK,OACDV,EAAWhB,KAAK0B,GAChB,MACJ,IAAK,QACL,IAAK,SACDT,EAAYjB,KAAK0B,G,CAI7BhB,EAAOmB,eAAe5B,EAAoBc,GAC1CL,EAAOmB,eAAevB,EAAoBU,GAC1CN,EAAOmB,eAAetB,EAAqBU,E,CAEnD,CAEA,SAASa,IACDtB,IACAuB,aAAavB,GACbA,OAAUhB,GAEdgB,EAAUwB,WAAWvB,EAAmB,IAC5C,CAGIb,EAAOM,OAAOS,kBACpBmB,IAKElC,EAAOM,OAAO+B,6BAA4BvB,IACxCA,GACHoB,G,GAEI,KAAMpC,EAAQK,eAIjBH,EAAOsC,UAAUC,yBAAwBC,IACjCxC,EAAOM,OAAOS,kBAAoByB,EAAMxB,WAAahB,EAAOM,OAAOS,iBAAiBC,UACpFkB,G,GAEL,KAAMpC,EAAQK,cACrB,EAYA,wBAA8B,C","sources":["webpack://wordrecolor/external commonjs \"vscode\"","webpack://wordrecolor/webpack/bootstrap","webpack://wordrecolor/./src/extension.ts"],"sourcesContent":["module.exports = require(\"vscode\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// The module 'vscode' contains the VS Code extensibility API\n// Import the module and reference it with the alias vscode in your code below\nimport * as vscode from 'vscode';\n\n// This method is called when your extension is activated\n// Your extension is activated the very first time the command is executed\nexport function activate(context: vscode.ExtensionContext) {\n\t// This will register command name and trigger a function with it\n\t// The function is empty, because I dont need it\n\t// I have to write this, else, the extension wont run\n\tlet disposable = vscode.commands.registerCommand('wordrecolor.activate', () => {\n\t\t;\n\t});\n\n\t// This will put the command specified in package.json into command palette (CTRL + SHIFT + P)\n\tcontext.subscriptions.push(disposable);\n\n    const nullDecorationType = vscode.window.createTextEditorDecorationType({\n        color: '#ff00f2', // Pink\n\t\tfontStyle: 'italic',\n\t\t// This is how you do it\n\t\t// fontWeight: 'bold',\n\t\t// fontStyle: 'italic',\n\t\t// textDecoration: 'underline'\n    });\n    const trueDecorationType = vscode.window.createTextEditorDecorationType({\n        color: '#23ff0a' // Green\n    });\n    const falseDecorationType = vscode.window.createTextEditorDecorationType({\n        color: 'red'\n    });\n\n\t// This is to delay the trigger update\n\t// This is to increase performance\n\t// Now, everytime you type in file, it will trigger the extension to colorize words\n\t// However, we dont want it to colorize immediately, but after a short delay\n    let timeout: NodeJS.Timer | undefined = undefined;\n\n    function updateDecorations() {\n        const editor = vscode.window.activeTextEditor;\n        if (editor) {\n            const document = editor.document;\n            const text = document.getText();\n            const nullRanges: vscode.Range[] = [];\n            const trueRanges: vscode.Range[] = [];\n            const falseRanges: vscode.Range[] = [];\n            let match;\n            const regex = /\\b(NULL|TRUE|FALSE|NONE|NOT IN)\\b/gi;\n            while (match = regex.exec(text)) {\n                const start = document.positionAt(match.index);\n                const end = document.positionAt(match.index + match[0].length);\n                const range = new vscode.Range(start, end);\n                switch (match[1].toUpperCase()) {\n                    case 'NULL':\n                    case 'NONE':\n                        nullRanges.push(range);\n                        break;\n                    case 'TRUE':\n                        trueRanges.push(range);\n                        break;\n                    case 'FALSE':\n                    case 'NOT IN':\n                        falseRanges.push(range);\n                        break;\n                }\n            }\n            editor.setDecorations(nullDecorationType, nullRanges);\n            editor.setDecorations(trueDecorationType, trueRanges);\n            editor.setDecorations(falseDecorationType, falseRanges);\n        }\n    }\n\n    function triggerUpdateDecorations() {\n        if (timeout) {\n            clearTimeout(timeout);\n            timeout = undefined;\n        }\n        timeout = setTimeout(updateDecorations, 500);\n    }\n\n\t// This one I think apply changes based on current active file you're editting\n    if (vscode.window.activeTextEditor) {\n\t\ttriggerUpdateDecorations();\n    }\n\t\n\t// This one will handle event handling\n\t// This will trigger function to colotizes the word\n    vscode.window.onDidChangeActiveTextEditor(editor => {\n\t\tif (editor) {\n\t\t\ttriggerUpdateDecorations();\n        }\n    }, null, context.subscriptions);\n\t\n\t// This one will handle event handling\n\t// This will trigger function to colotizes the word\n    vscode.workspace.onDidChangeTextDocument(event => {\n        if (vscode.window.activeTextEditor && event.document === vscode.window.activeTextEditor.document) {\n            triggerUpdateDecorations();\n        }\n    }, null, context.subscriptions);\n}\n\n// Generated by Bing\nfunction getFunctionNameAndLineNumber(): [string, number] {\n    const error = new Error();\n    const stack = error.stack?.split('\\n')[2];\n    const functionName = stack?.match(/at (\\S+)/)?.[1] ?? '';\n    const lineNumber = parseInt(stack?.match(/:(\\d+):/)?.[1] ?? '', 10);\n    return [functionName, lineNumber];\n}\n\n// This method is called when your extension is deactivated\nexport function deactivate() {}\n"],"names":["module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","context","disposable","vscode","commands","registerCommand","subscriptions","push","nullDecorationType","window","createTextEditorDecorationType","color","fontStyle","trueDecorationType","falseDecorationType","timeout","updateDecorations","editor","activeTextEditor","document","text","getText","nullRanges","trueRanges","falseRanges","match","regex","exec","start","positionAt","index","end","length","range","Range","toUpperCase","setDecorations","triggerUpdateDecorations","clearTimeout","setTimeout","onDidChangeActiveTextEditor","workspace","onDidChangeTextDocument","event"],"sourceRoot":""}